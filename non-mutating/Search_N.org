# Created 2019-06-07 Fri 13:02
#+OPTIONS: author:nil title:nil toc:nil
#+export_file_name: ../../../non-mutating/Search_N.org

* The Search_N algorithm

The Search_N algorithm finds the first index in an array at which a
value occurs a given number of times. Its signature is the
following:

#+begin_src ada
  function Search_N (A : T_Arr; Val : Integer; N : Positive) return Option;
#+end_src

We will use an ~Option~ to encapsulate the result.

** The Constant_Range_From_Location and Has_Constant_Subrange predicates

As usual, we define predicates to express more easily the
specification of ~Search_N~.

First, we define a ~Constant_Range_From_Location~ ghost function to
express that an array contains a constant subrange of length
~Length~ from location ~Loc~:

#+begin_src ada
  function Constant_Range_From_Location
    (A      : T_Arr;
     Val    : T;
     Loc    : Positive;
     Length : Positive)
     return Boolean is
    (Loc - 1 + Length <= A'Last
     and then (for all I in Loc .. Loc - 1 + Length => A (I) = Val)) with
     Pre => Loc >= A'First and then Loc <= A'Last - Length + 1
     and then Loc - 1 + Length <= Positive'Last;
#+end_src

The preconditions avoid possible overflows.

Then, a ~Has_Constant_Subrange~ ghost function is defined to
express that an array has a subrange containing only a given
value. The subrange end should not exceed index ~I~. The
precondition avoids a possible overflow too:

#+begin_src ada
  function Has_Constant_Subrange
    (A    : T_Arr;
     Val  : T;
     I, N : Positive)
     return Boolean is
    (for some J in A'First .. I - N + 1 =>
       Constant_Range_From_Location (A, Val, J, N)) with
     Pre => I in A'Range;
#+end_src

** Specification of Search_N

The specification of ~Search_N~ is rather easy to express:

#+begin_src ada
  function Search_N
    (A   : T_Arr;
     Val : T;
     N   : Positive)
     return Option with
     Pre            => A'First <= A'Last and then A'Last < Positive'Last,
     Contract_Cases =>
     (Has_Constant_Subrange (A, Val, A'Last, N) =>
        Search_N'Result.Exists and then Search_N'Result.Value >= A'First
        and then Search_N'Result.Value <= A'Last - N + 1
        and then Constant_Range_From_Location
  	(A, Val, Search_N'Result.Value, N)
        and then
        (if Search_N'Result.Value > A'First then
  	 not Has_Constant_Subrange
  	   (A, Val, Search_N'Result.Value + N - 2, N)),
      others => not Search_N'Result.Exists);
#+end_src

- the preconditions express
  - the fact that the last index of ~A~ is less than the last
    ~Positive~ value, as we will use ~A'Last + 1~ in the
    implementation.
  - the fact that ~A~ is not empty.
- the postconditions express
  - the fact that if ~Option.Exists~ is true, then
    1. a valid index will be returned.
    2. ~Val~ occurs ~N~ times starting at the returned index.
    3. if the returned index is not the first index of ~A~, then
       for all indexes ~K~ of ~A~ less than the returned index,
       there aren't ~N~ occurrences of ~Val~ starting at the index
       ~K~.
  - the fact that if ~Option.Exists~ is false, then there are no
    subsequence with ~Val~ repeated ~N~ times in the array ~A~.

** Implementation of Search_N

The implementation of ~Search_N~ is the following:

#+begin_src ada
  function Search_N
    (A   : T_Arr;
     Val : T;
     N   : Positive)
     return Option
  is
     Result : Option   := (Exists => False);
     Start  : Positive := A'First;
  begin
     if A'Length < N then
        return Result;
     end if;

     for I in A'Range loop
        if A (I) /= Val then
  	 Start := I + 1;

  	 pragma Assert
  	   (if I <= A'Last - N + 1 then not Constant_Range_From_Location (A, Val, I, N));
        elsif I + 1 - Start = N then
  	 Result := (Exists => True, Value => Start);

  	 return Result;
        end if;

        pragma Loop_Invariant (not Result.Exists);
        pragma Loop_Invariant (Start in A'First .. I + 1);
        pragma Loop_Invariant
  	(if Start <= I then
  	   Constant_Range_From_Location (A, Val, Start, I + 1 - Start));
        pragma Loop_Invariant
  	(not Has_Constant_Subrange (A, Val, I, N));
        pragma Loop_Invariant (if Start > A'First then A (Start - 1) /= Val);
     end loop;

     return Result;

  end Search_N;
#+end_src

The loop invariants specify that:
- no subsequence of ~N~ times the value ~Value~ has been found
  yet.
- ~Start~ is a valid index (except for the case ~I + 1~ which
  means that the subsequence does not exist).
- if ~Start~ is less than ~I~, then there is a constant range of
  ~Val~ starting at ~Start~ of length ~I + 1 - Start~.
- there is no subsequence of length ~N~ containing only the
  value ~Val~ in the range ~A'First .. I~ of the array.
- if ~A'First~ is less than ~Start~, then the value at index
  ~Start - 1~ is different from ~Val~. This allows to prove the
  previous invariant. Indeed, there could be a subsequence of
  length ~N~ if the values before ~A(Start)~ were equal to
  ~Val~. This invariant states that ~Start~ *is* the first index
  of the constant range.

In order to prove the invariant on ~Has_Constant_Subrange~
stating that there is no constant subrange containing ~Val~ in
~A~ of length ~N~ up to index ~I~, an assertion must be added
inside the then branch of the condition:

#+begin_src ada
  pragma Assert
    (if I <= A'Last - N + 1 then not Constant_Range_From_Location (A, Val, I, N));
#+end_src

This assertion states there is no constant subrange of length ~N~
containing ~Val~ starting from ~I~ in ~A~ which is normal as the
then branch of the conditional is executed when ~A (I) /= Val~.

Everything is proved by ~GNATprove~.
