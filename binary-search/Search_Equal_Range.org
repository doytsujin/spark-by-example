# Created 2019-06-07 Fri 13:02
#+OPTIONS: author:nil title:nil toc:nil
#+export_file_name: ../../../binary-search/Search_Equal_Range.org

* The Search_Equal_Range Algorithm

The ~Search_Equal_Range~ algorithm will find the range of a given
value ~V~ in a given array ~A~.

Its signature can be expressed as :

#+begin_src ada
  function Search_Equal_Range (A : T_Arr; V : T) return Option_Pair;
#+end_src

This function returns an ~Option_Pair~. ~Option_Pair~ is just a
custom type like ~Option~ defined to store two values instead of a
single one:

#+begin_src ada
  type Option_Pair (Exists : Boolean := False) is record
     case Exists is
        when True =>
  	 Lower : Integer;
  	 Upper : Integer;
        when False =>
  	 null;
     end case;
  end record;
#+end_src

If ~Result~ is of type ~Option_Pair~, and equal to the result of
~Search_Equal_Range (A,V)~, then these inequalities are verified,
provided that ~Result.Exists~ is true:

- for all ~J~ in ~A'First .. Result.Lower - 1~ then ~A(J) < V~
- for all ~J~ in ~Result.Lower .. Result.Upper - 1~ then ~A(J) = V~
- for all ~J~ in ~Result.Upper .. A'Last~ then ~V < A(J)~

Notice that the ranges on wich ~J~ is defined in the three previous
points may be empty.

This algorithm is the combination of the result of both
[[Search_Lower_Bound.org][Search_Lower_Bound]] and [[Search_Upper_Bound.org][Search_Upper_Bound]], so the properties of the
returned ~Option_Pair~ can be easily infered from those of the
result of these two functions.

** Specification of Search_Equal_Range

~Search_Equal_Range~ can be specified as follows:

#+begin_src ada
  function Search_Equal_Range
    (A : T_Arr;
     V : T)
     return Option_Pair with
     Pre            => A'Last < Positive'Last and then Sorted (A),
     Contract_Cases => (A'Length = 0 => not Search_Equal_Range'Result.Exists,
      A'Length > 0 =>
        Search_Equal_Range'Result.Exists
        and then A'First <= Search_Equal_Range'Result.Lower
        and then Search_Equal_Range'Result.Lower <=
  	Search_Equal_Range'Result.Upper
        and then Search_Equal_Range'Result.Upper <= A'Last + 1
        and then Strict_Upper_Bound
  	(A (A'First .. Search_Equal_Range'Result.Lower - 1), V)
        and then
        (if Search_Equal_Range'Result.Lower /= Search_Equal_Range'Result.Upper
         then
  	 Constant_Range
  	   (A, V, Search_Equal_Range'Result.Lower,
  	    Search_Equal_Range'Result.Upper - 1))
        and then Strict_Lower_Bound
  	(A (Search_Equal_Range'Result.Upper .. A'Last), V));
#+end_src

There are two preconditions for ~Search_Equal_Range~:

- ~A~ should be sorted, as with all binary search algorithms
- ~A'Last~ should be less than ~Positive'Last~ as the returned
  values can be equal to ~A'Last +1~

The postconditions are expressed through contract cases stating that

- there are no indexes returned if the array is empty
- if the array is not empty then a valid pair of indexes is returned, and
  1. the pair of indexes verify ~A'First <= Result'Lower <=
              Result.Upper <= A'Last +1~
  2. for all ~J~ in ~A'First .. Result.Lower - 1~ then ~A(J) < V~
  3. for all ~J~ in ~Result.Lower .. Result.Upper - 1~ then ~A(J)
              = V~
  4. for all ~J~ in ~Result.Upper .. A'Last~ then ~V < A(J)~

  Again, the ranges defined for ~J~ may be empty.

** Implementations of Search_Equal_Range

We will present two implementations of this algorithm. They both
use the same specification.

*** First implementation

The ~Search_Equal_Range~ can be easily implemented using the
previously defined functions [[Search_Lower_Bound.org][Search_Lower_Bound]] and
[[Search_Upper_Bound.org][Search_Upper_Bound]] as they directly provide the desired pair of
indexes:

#+begin_src ada
  function Search_Equal_Range
    (A : T_Arr;
     V : T)
     return Option_Pair
  is

     Result : Option_Pair := (Exists => False);
  begin

     if A'Length > 0 then
        Result :=
  	(Exists => True, Lower => Search_Lower_Bound (A, V).Value,
  	 Upper  => Search_Upper_Bound (A, V).Value);

     else
        null;

     end if;

     return Result;
  end Search_Equal_Range;
#+end_src

~GNATprove~ does not need any annotations other than the
specification of the function itself to prove this
implementation.

*** A more elaborate implementation

The first version, while being easy to implement, understand and
prove, does some work two times (the array is traversed entirely
by ~Search_Lower_Bound~ and ~Search_Upper_Bound~). This is why
another implementation is proposed in the C++ standard library,
which in SPARK translates to:

#+begin_src ada
  function Search_Equal_Range_Opt
    (A : T_Arr;
     V : T)
     return Option_Pair
  is

     Result : Option_Pair := (Exists => False);
     Middle : Integer     := A'First;
     Left   : Integer     := A'First;
     Right  : Integer     := A'Last + 1;
  begin
     if A'Length > 0 then
        Result := (Exists => True, Lower => A'First, Upper => A'Last + 1);
        while Right > Left loop
  	 Middle := Left + (Right - Left) / 2;

  	 if A (Middle) < V then
  	    Left := Middle + 1;
  	 elsif V < A (Middle) then
  	    Right := Middle;
  	 else
  	    exit;
  	 end if;

  	 pragma Loop_Variant (Decreases => Right - Left);
  	 pragma Loop_Invariant
  	   (A'First <= Left and then Left <= Right
  	    and then Right <= A'Last + 1);
  	 pragma Loop_Invariant
  	   (if Left /= A'First then
  	      Strict_Upper_Bound (A (A'First .. Left - 1), V));
  	 pragma Loop_Invariant
  	   (if Right /= A'Last + 1 then
  	      Strict_Lower_Bound (A (Right .. A'Last), V));

        end loop;

        if Left < Right then

  	 Result.Lower := Search_Lower_Bound (A (Left .. Middle), V).Value;

  	 Middle := Middle + 1;

  	 if Middle < A'Last + 1 then
  	    Result.Upper :=
  	      Search_Upper_Bound (A (Middle .. A'Last), V).Value;
  	 else
  	    Result.Upper := A'Last + 1;
  	 end if;

        else
  	 Result.Lower := Left;
  	 Result.Upper := Right;

        end if;

     end if;

     return Result;

  end Search_Equal_Range_Opt;
#+end_src

The working principle of this code is to narrow down at the same
time the ranges where ~Search_Lower_Bound~ and
~Search_Upper_Bound~ will look for the results instead of calling
these two functions separately.

The loop variant is ~Right - Left~, which decreases at each
iteration. The loop invariants express that

- ~Left~ and ~Right~ remain in the correct range  and in the
  correct position with relation to each other
- all values found at an index strictly lower than ~Left~ are
  less than ~V~
- all values found at an index greater or equal than ~Right~ are
  strictly greater than ~V~.

These loop invariants and the postconditions of
~Search_Lower_Bound~ and ~Search_Upper_Bound~, enable ~GNATprove~
to prove everything.
