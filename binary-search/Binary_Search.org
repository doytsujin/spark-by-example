# Created 2019-06-07 Fri 13:02
#+OPTIONS: author:nil title:nil toc:nil
#+export_file_name: ../../../binary-search/Binary_Search.org

* The Binary_Search algorithm

The ~Binary_Search~ algorithm is a classic Computer Science
algorithm. Its signature can be expressed as

#+begin_src ada
  function Binary_Search (A : T_Arr; Val : T) return Boolean;
#+end_src

It will simply return ~True~ if ~Val~ is contained in ~A~.

** Specification of Binary_Search

The specification of ~Binary_Search~ can be expressed as

#+begin_src ada
  function Binary_Search
    (A   : T_Arr;
     Val : T)
     return Boolean with
     Pre  => Sorted (A) and then A'Last < Positive'Last,
     Post => Binary_Search'Result = Has_Value (A, Val);
#+end_src

The first precondition specifies that the array has to be
sorted. The second precondition is needed because we will use the
~Search_Lower_Bound~ function previously defined. If we do not
specify that ~A'Last < Positive'Last~, we might encounter an
~precondition might fail~ error during the proof. Of course, the
difference between ~Find~ (defined in the chapter on non mutating
algorithms) and ~Binary_Search~ is that ~Find~ has a linear
complexity whereas ~Binary_Search~ has a logarithmic complexity.

** Implementation of Binary_Search

The implementation of ~Binary_Search~ is

#+begin_src ada
  function Binary_Search
    (A   : T_Arr;
     Val : T)
     return Boolean
  is
     Low : Option := Search_Lower_Bound (A, Val);
     I   : Positive;
  begin
     if Low.Exists then
        I := Low.Value;
        return (I <= A'Last and then A (I) <= Val);
     else
        return False;
     end if;

  end Binary_Search;
#+end_src

Note that if ~Low.Exists = True~, ~Val <= A(Low.Value)~ is always true. This
is why we only check for ~A (I) <= Val~ to be true.

Using ~GNATprove~, the function is proved without difficulty.
