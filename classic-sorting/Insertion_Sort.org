# Created 2019-06-07 Fri 13:02
#+OPTIONS: author:nil title:nil toc:nil
#+export_file_name: ../../../classic-sorting/Insertion_Sort.org

* The Insertion_Sort algorithm

The ~Insertion_Sort~ algorithm sorts an array in ascending
order. Its signature is the following:

#+begin_src ada
  procedure Insertion_Sort (A : in out T_Arr)
#+end_src

The ~Insertion_Sort~ algorithm sorts an array by locating the
appropriate index in the sorted array for the current value being
examined at each iteration. ~Insertion_Sort~ and [[Selection_Sort.org][Selection_Sort]]
work in a similar way, the main difference being that
~Insertion_Sort~ performs less comparisons between elements, but
has to write more values.

** Specification of Insertion_Sort

The specification of ~Insertion_Sort~ is the same as the one of
~Selection_Sort~ (in fact, it should be the case for all sorting
algorithms):

#+begin_src ada
  procedure Insertion_Sort (A : in out T_Arr) with
     Pre  => A'Last < Positive'Last,
     Post => Sorted (A) and then Multiset_Unchanged (A, A'Old);
#+end_src

There is only an extra precondition on the last index of ~A~ that
should be less than ~Positive'Last~ to avoid possible overflows.

** Implementation of Insertion_Sort

~Insertion_Sort~ could be implemented with the help of the [[file:../mutating/Rotate.org][Rotate]]
algorithm, as it is done in [[https://github.com/fraunhoferfokus/acsl-by-example/blob/master/StandardAlgorithms/classic-sorting/insertion_sort/insertion_sort.c][ACSL by example]]:

#+begin_src ada
  procedure Insertion_Sort (A : in out T_Arr) is
     K : Integer;
  begin
     if A'Length = 0 then
        return;
     end if;

     for J in A'Range loop
        K :=
  	(if J = A'First then A'First
  	 else Search_Upper_Bound (A (A'First .. J - 1), A (J)).Value);
        if K < J then
  	 Rotate (A (K .. J), J - K);
        end if;
     end loop;

  end Insertion_Sort;
#+end_src

This approach, while being concise, makes the proof quite
difficult since the specification of ~Rotate~ only specifies
equality of ranges, and we would need to deduce from these
equalities that the multiset represented by ~A~ has not changed
and that the order of the elements of ~A~ remains relatively
stable.

To make the proof easier, we will take another approach: we
emulate the effects of ~Rotate~ with a loop of [[file:../mutating/Random_Shuffle.org#the-swap_array-procedure][Swap_Array]], which
can be annotated to our needs:

#+begin_src ada
  procedure Insertion_Sort (A : in out T_Arr) is
     K : Integer;
  begin
     if A'Length = 0 then
        return;
     end if;

     for J in A'Range loop
        K :=
  	(if J = A'First then A'First
  	 else Search_Upper_Bound (A (A'First .. J - 1), A (J)).Value);

        for L in reverse K .. J - 1 loop

  	 Swap_Array (A, L, L + 1);

  	 pragma Loop_Invariant (if L > K then A (L - 1) <= A (L + 1));
  	 pragma Loop_Invariant (Multiset_Unchanged (A, A'Loop_Entry));
  	 pragma Loop_Invariant
  	   (for all M in A'First .. L - 1 => A (M) = A'Loop_Entry (M));
  	 pragma Loop_Invariant (Sorted (A (A'First .. L - 1)));
  	 pragma Loop_Invariant
  	   (for all M in A'First .. K - 1 => A (M) <= A (L));
  	 pragma Loop_Invariant (for all M in K .. J => A (M) >= A (L));
  	 pragma Loop_Invariant (Sorted (A (L .. J)));
        end loop;

        pragma Loop_Invariant (Sorted (A (A'First .. J)));
        pragma Loop_Invariant (Multiset_Unchanged (A, A'Loop_Entry));

     end loop;

  end Insertion_Sort;
#+end_src

In this implementation, we can see that there is a second loop
embedded within the main loop. Its function is to insert the
element found at index ~J~ at index ~K~ by shifting all the
elements between these indexes by one place to the right.

One thing to kepp in mind when analysing the inner loop is that
the value at index ~L~ is constant and equal to ~A'Loop_entry (J)~.

The invariants in the inner loop verify that:
- ~A (L - 1) <= A (L + 1)~, which is used to prove the sorted
  aspect of the indexes ~K~ through ~J~ at the end of the loop
- we only apply permutations on ~A~
- we only modify indexes higher than ~L~, this helps prove that
  the beginning of the array is sorted
- with the previous invariant, we prove that ~A~ is sorted from
  indexes ~A'First~ through ~L - 1~
- we verify that the values at indexes less than ~K - 1~ are
  greater than ~A (L)~. This will be used to prove that the array
  is sorted on indexes ~A'First~ through ~J~.
- the two last invariants enable to prove that the array is sorted
  from indexes ~L~ through ~J~.

When combining the loop invariants on sorting and the fifth loop
invariant at the exit of the secondary loop we can prove the first
loop invariant of the main loop. The ~Multiset_Unchanged~
invariant in the main loop is proved with the corresponding
invariant of the inner loop.

With this specification and implementation ~GNATprove~ proves everything.
