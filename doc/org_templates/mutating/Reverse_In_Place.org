#+EXPORT_FILE_NAME: ../../../mutating/Reverse_In_Place.org
#+OPTIONS: author:nil title:nil toc:nil

** The Reverse_In_Place algorithm

   The ~Reverse_In_Place~ algorithm aims to achieve the same goal as
   [[Reverse_Copy.org][Reverse_Copy]] but the result is stored in the original array, thus
   modifying it, instead of copying it. Its signature reads:

   #+BEGIN_SRC ada
     procedure Reverse_In_Place (A : in out T_Arr);
   #+END_SRC

*** Specification of Reverse_In_Place

    ~Reverse_In_Place~ can be specified as follows:

    #+INCLUDE: "../../../mutating/reverse_in_place_p.ads" :src ada :range-begin "procedure Reverse_In_Place" :range-end "\s-*(\([^()]*?\(?:\n[^()]*\)*?\)*)\s-*\([^;]*?\(?:\n[^;]*\)*?\)*;" :lines "8-10"

    The postcondition ensures that ~A~ is indeed reversed at the end
    of the procedure compared to its state at the beginning of the
    procedure (using the ~Old~ attribute).

*** Implementation of Reverse_In_Place
**** The function Is_Reversed_Up_To

     As the most obvious algorithm will simply reverse the elements of
     ~A~ one by one starting from the first, it will be easier for
     writing assertions to define a function that asserts that two
     arrays ~A~ and ~B~ are reversed up to a particular index
     ~J~. This is express by the ~Is_Reversed_Up_To~ function:

     #+INCLUDE: "../../../spec/is_reversed_p.ads" :src ada :range-begin "function Is_Reversed_Up_To" :range-end "\s-*(\([^()]*?\(?:\n[^()]*\)*?\)*)\s-*\([^;]*?\(?:\n[^;]*\)*?\)*;" :lines "15-22"

**** A first version using Swap

     ~Reverse_In_Place~ can be implemented using the [[Swap.org][Swap]] function
     defined earlier:

     #+INCLUDE: "../../../mutating/reverse_in_place_swap_p.adb" :src ada :range-begin "procedure Reverse_In_Place" :range-end "end Reverse_In_Place;" :lines "5-34"

     There are a few things to point out here:
     - ~Half~ is calculated so that if ~A~ has an odd length then we
       do not try to swap the middle value with itself. This helps
       avoid aliasing issues.
     - the first loop invariant specifies that the array remains
       unchanged in the ~A'Length - 2 * J~ middle indexes, which the
       algorithm has not yet covered at iteration ~J~
     - the two other invariants specify that ~A~ is reversed up to
       index J compared to its value before entering the loop.

     With this implementation, ~GNATprove~ manages to prove everything
     but one thing: it cannot verify that ~A (A'First + J)~ and ~A
     (A'Last - J)~ are not aliased (see [[http://docs.adacore.com/spark2014-docs/html/lrm/subprograms.html#anti-aliasing][SPARK reference manual section
     6.4.2]]):

     #+BEGIN_SRC shell
       reverse_in_place_swap_p.adb:20:16: medium: formal parameters "P" and "Q" might be aliased (SPARK RM 6.4.2)
     #+END_SRC

     Notice that even if the assertion ~A'First + J /= A'Last - J~
     placed before the call to ~Swap~ proves the absence of aliasing,
     ~GNATprove~ emits the error message.

**** Avoiding the aliasing

     In order to avoid the aliasing issue, it is possible to modify
     the implementation of ~Reverse_In_Place~ by removing the call to
     ~Swap~ and doing the swap "manually" with an extra variable:

     #+INCLUDE: "../../../mutating/reverse_in_place_p.adb" :src ada :range-begin "procedure Reverse_In_Place" :range-end "end Reverse_In_Place;" :lines "5-34"

     This implementation enables ~GNATprove~ to prove everything.

# Local Variables:
# ispell-dictionary: "english"
# End:
