# Created 2019-06-07 Fri 16:53
#+OPTIONS: author:nil title:nil toc:nil
#+export_file_name: ../../../mutating/Remove_Copy.org

* The Remove_Copy algorithm

The ~Remove_Copy~ algorithm copies the values of an array in
another array but deletes every occurrence of a given value when
copying.  It also modifies an argument which will be the last index
at which the second array has been modified:

#+begin_src ada
  procedure Remove_Copy (A : T_Arr; B : in out T_Arr; Val : T; K : in out Natural)
#+end_src

Implementing and proving this procedure is not obvious as you will
see. We will introduce in this section manual proofs with lemmas in
SPARK.

** Predicates used for specification

We first define two predicates to ease assertion writing.

*** The Multiset_Retain_Rest predicate

First, we need to define a predicate to check if two arrays have
the same number of occurrences of each of their values except for
a given value. The ~Multiset_Retain_Rest~ predicate can be
expressed as:

#+begin_src ada
  function Multiset_Retain_Rest
    (A   : T_Arr;
     B   : T_Arr;
     Val : T)
     return Boolean is
    (for all X in T => (if X /= Val then Occ (A, X) = Occ (B, X)));
#+end_src

The predicate will return true if and only if for each value in
type ~T~ different from ~Val~, the number of occurrences of this
value in the two arrays ~A~ and ~B~ is the same.

*** The Remove_Count predicate

The ~Remove_Count~ predicate is quite simple:

#+begin_src ada
  function Remove_Count
    (A   : T_Arr;
     Val : T)
     return Natural is (A'Length - Occ (A, Val)) with
     Pre  => A'Length > 0,
     Post => Remove_Count'Result in 0 .. A'Length;
#+end_src

This predicate returns the number of indexes in a given array
such that the values at these indexes are different from a given
value ~Val~.

** Specification of Remove_Copy

The specification of ~Remove_Copy~ is the following:

#+begin_src ada
  procedure Remove_Copy
    (A   :        T_Arr;
     B   : in out T_Arr;
     Val :        T;
     K   : in out Natural) with
     Pre            => B'Length = A'Length and then B'Last < Positive'Last,
     Contract_Cases =>
     (A'Length > 0 =>
        (K in B'First - 1 .. B'Last
         and then K = B'First + Remove_Count (A, Val) - 1
         and then (for all L in B'First .. K => B (L) /= Val)
         and then (for all L in K + 1 .. B'Last => B (L) = B'Old (L))
         and then
         (if K >= B'First then
  	  Multiset_Retain_Rest (A, B (B'First .. K), Val))),
      others => (B'Old = B and then K'Old = K));
#+end_src

The preconditions express the fact that ~A~ and ~B~ have the same
length, and that ~B'Last~ is strictly less than ~Positive'Last~
(the K variable may have the value ~B'Last + 1~).

The contract cases express the following facts:
- if ~A~ is not empty then:
  1. ~K~ is in ~B'First - 1 .. B'Last~. It corresponds to the last
     index at which ~B~ has been modified. If ~K~ is equal to
     ~B'First - 1~, it means that ~B~ has not been changed.
  2. the range in which ~B~ has been modified has a length equal
     to the number of values different from ~Val~ in ~A~
  3. in the sub-array of ~B~ that has been modified, every value
     is different from ~Val~
  4. the sub-array of ~B~ that starts after ~K~ has not been
     modified
  5. if ~B~ has been modified, then ~A~ and the modified subarray
     of ~B~ have the same occurences of each value except for
     ~Val~.
- otherwise ~A~ is empty and then ~B~ and ~K~ do not change

** Implementation of Remove_Copy

*** A first implementation

A first implementation of ~Remove_Copy~ could be the following:

#+begin_src ada
  procedure Remove_Copy_First
    (A   :        T_Arr;
     B   : in out T_Arr;
     Val :        T;
     K   : in out Natural)
  is
     J : Integer := A'First - 1;

  begin
     if A'Length > 0 then
        K := B'First;

        for J in A'Range loop
  	 if A (J) /= Val then
  	    B (K) := A (J);
  	    K     := K + 1;
  	 end if;

  	 pragma Loop_Invariant
  	   (K = B'First + Remove_Count (A (A'First .. J), Val));
  	 pragma Loop_Invariant
  	   (if K = B'First then (for all L in A'First .. J => A (L) = Val));
  	 pragma Loop_Invariant
  	   (if K > B'First then
  	      Multiset_Retain_Rest
  		(A (A'First .. J), B (B'First .. K - 1), Val));
  	 pragma Loop_Invariant
  	   (for all L in B'First .. K - 1 => B (L) /= Val);
  	 pragma Loop_Invariant
  	   (for all L in K .. B'Last => B (L) = B'Loop_Entry (L));
        end loop;

        K := K - 1;
     end if;

  end Remove_Copy_First;
#+end_src

The loop invariants specify that:
- ~K~ is equal to ~B'First~ plus the number of values different
  from ~Val~ encountered until now.
- if ~K~ has not been increased, then each value of ~A~ at index
  less or equal than ~J~ is equal to ~Val~.
- if ~K~ has been increased, then the predicate
  ~Multiset_Retain_Rest~ is verified for the subarrays given
- each value of ~B~ that has been modified is different from
  ~Val~
- each value of ~B~ that has not been modified is the same as
  before

With this specification and implementation, ~GNATprove~ cannot
prove the loop invariant with ~Multiset_Retain_Rest~, which is
the most difficult to prove. Indeed, the predicate checks a
recursive property for each value of ~T~, which is not provable
for the SMT solvers used with ~GNATprove~. We will need to help
the provers using *lemmas*.

*** The Make_Prove_Multiset lemma

When trying to prove difficult properties, the only solution may
be to attempt a manual proof. Manual proof of a property can be
done using a proof assistant, such as Coq, or using *lemmas* (see
section 7.9.3 of SPARK User's Guide on [[http://docs.adacore.com/spark2014-docs/html/ug/gnatprove_by_example/manual_proof.html#manual-proof-using-user-lemmas][Manual Proof
Examples]]). Lemmas are ghost procedures representing properties
that will be instantiated as assertions to help the solvers. Such
a procedure can be viewed as a mathematical lemma:

- the preconditions of the procedure are the premises of the
  lemma
- the postconditions of the procedure are the conclusion of the
  lemma

Lemmas have of course to be proved. In order to do so, SPARK
requires lemmas to have an implementation. You can think of the
implementation of a lemma as a sketch of the proof.

Notice that the lemma implementation may be ~null~ and in this
case, the postcondition of the lemma is not proved. It can
nevertheless be justified or proved by a proof assistant.

We noted here that the prover had a problem with the invariant
concerning ~Multiset_Retain_Rest~ when the first values of ~A~
were ~Val~ by examining the counterexamples. We will present in
the following two lemmas useful to overcome this difficulty.

**** The Unique_Value lemma

A first lemma is defined: it states that if each value of an
array ~A~ is equal to ~Val~, then for a value ~E~ different from
~Val~, ~Occ(A,E) = 0~. Given the fact that ~GNATprove~ and its
associated solvers does not yet use inductive reasoning, we need
to help it prove the lemma.

Its specification is rather simple:

#+begin_src ada
  procedure Unique_Value
    (A   : T_Arr;
     E   : T;
     Val : T) with
     Pre => (for all L in A'First .. A'Last => A (L) = Val) and then E /= Val,
     Post => Occ (A, E) = 0;
#+end_src

Its implementation is the following:

#+begin_src ada
  procedure Unique_Value
    (A   : T_Arr;
     E   : T;
     Val : T)
  is
  begin
     if A'Length = 0 then
        return;
     end if;
     Unique_Value (Remove_Last (A), E, Val);
  end Unique_Value;
#+end_src

Remember that the implementation of ~Unique_Value~ represents a
sketch of proof for the lemma. First, we specify the final
condition, which is the case when ~A~ is empty.  Then, the idea
is to use the lemma on the same array without its last value as
we know that the array contains only ~Val~ values. We will thus
prove the property for ~Remove_Last (A)~ and with the definition
of ~Occ_Def~ (~if A (A'Last) /= E then Result = Occ_Def
      (Remove_Last (A), E)~), the lemma is proved for ~A~.

**** The Make_Prove_Multiset lemma

The ~Make_Prove_Multiset~ lemma is here to help the prover to
prove properties using ~Multiset_Retain_Rest~ by distinguishing
two cases for two arrays ~A~ and ~B~ with the same last element:
either ~B~ has only one element, and then all elements of ~A~
are equal to ~Val~, either ~Multiset_Retain_Rest (Remove_Last
      (A), Remove_Last(B), Val)~ should hold. We can conclude in both
cases that ~Multiset_Retain_Rest (A, B, Val)~ holds. This will
of course help the solvers with the inductive part of the proof.

The lemma is written as follows:

#+begin_src ada
  procedure Make_Prove_Multiset
    (A   : T_Arr;
     B   : T_Arr;
     Val : T) with
     Pre => A'Length > 0 and then B'Length > 0
     and then
     (if B'Length = 1 then (for all L in A'First .. A'Last - 1 => A (L) = Val)
      else Multiset_Retain_Rest (Remove_Last (A), Remove_Last (B), Val))
     and then A (A'Last) = B (B'Last),
     Post => Multiset_Retain_Rest (A, B, Val);
#+end_src

The preconditions, representing the hypotheses of the lemma, are
the following:
- ~A~ and ~B~ must not be empty and their last value is the
  same.
- if ~B~ has only one element, then all elements of
  ~Remove_Last(A)~ are equal to ~Val~.
- if not, then the ~Multiset_Retain_Rest~ is verified with the
  two arrays without their last value.

The postcondition expresses the fact that the
~Multiset_Retain_Rest~ predicate will be verified with the two
complete arrays.

Its implementation is the following:

#+begin_src ada
  procedure Make_Prove_Multiset
    (A   : T_Arr;
     B   : T_Arr;
     Val : T)
  is
  begin
     for E in T loop
        if E /= Val and then B'Length = 1 then
  	 Unique_Value (Remove_Last (A), E, Val);
        end if;

        pragma Loop_Invariant
  	(for all F in T'First .. E =>
  	   (if F /= Val then Occ (A, F) = Occ (B, F)));
     end loop;

  end Make_Prove_Multiset;
#+end_src

To prove the lemma, we loop on all possible values for ~E~. Is
~E = Val~, then, nothing has to be done. If ~E /= Val~ and
~B'Length = 1~, then we show that ~Remove_Last (A)~ has an
unique value ~Val~. The loop invariant is dedicated to store the
proofs already established for the previous values.

*** A second proof attempt for Remove_Copy

We can now use the ~Make_Prove_Multiset~ in the implementation of
~Remove_Copy~ by instantiating it in the main loop of the
algorithm, thus helping the provers by stating that
~Multiset_Retain_Rest (A (A'First .. J), B (B'First .. K - 1),
     Val)~ when finding a value different from ~Val~ (and therefore
incrementing ~K~):

#+begin_src ada
  procedure Remove_Copy_Second
    (A   :        T_Arr;
     B   : in out T_Arr;
     Val :        T;
     K   : in out Natural)
  is
     J : Integer := A'First - 1;

  begin
     if A'Length > 0 then
        K := B'First;

        for J in A'Range loop
  	 if A (J) /= Val then
  	    pragma Assert
  	      (if K > B'First then
  		 Multiset_Retain_Rest
  		   (A (A'First .. J - 1), B (B'First .. K - 1),
  		    Val)); -- proved here
  	    B (K) := A (J);
  	    pragma Assert
  	      (if K > B'First then
  		 Multiset_Retain_Rest
  		   (A (A'First .. J - 1), B (B'First .. K - 1),
  		    Val)); -- not proved anymore
  	    K := K + 1;
  	    Make_Prove_Multiset
  	      (A (A'First .. J), B (B'First .. K - 1), Val);
  	 end if;

  	 pragma Loop_Invariant
  	   (if K = B'First then (for all L in A'First .. J => A (L) = Val));
  	 pragma Loop_Invariant
  	   (K = B'First + Remove_Count (A (A'First .. J), Val));
  	 pragma Loop_Invariant
  	   (if K > B'First then
  	      Multiset_Retain_Rest
  		(A (A'First .. J), B (B'First .. K - 1), Val));
  	 pragma Loop_Invariant
  	   (for all L in B'First .. K - 1 => B (L) /= Val);
  	 pragma Loop_Invariant
  	   (for all L in K .. B'Last => B (L) = B'Loop_Entry (L));
        end loop;
        K := K - 1;
     end if;

  end Remove_Copy_Second;
#+end_src

Using ~GNATprove~ with this implementation, a ~precondition might
     fail~ appears when instantiating the lemma in the loop. With the
help of some assertions (added in the previous source code), we
see that the precondition that is not verified is the
~Multiset_Retain_Rest~ one. The prover may consider that after
the line with the affectation ~B (K) := A (J)~, the state of ~B~
has changed, particularly for values before index ~K~. Therefore,
even if the predicate is about the values in range ~B'First
     .. K - 1~ and we changed the ~K~ th value of ~B~, the prover does
not consider ~Multiset_Retain_Rest (A (A'First .. J), B (B'First
     .. K - 1), Val))~ to hold.

A classic idea to solve such problem is to create a ghost
variable to save the state of ~B~ before the affectation and
prove ~Multiset_Retain_Rest (A (A'First .. J), B (B'First .. K -
     1), Val))~ first with this ghost variable, and then with the
actual value of ~B~.

*** The Occ_Equal and Multiset_Retain_Rest_Equal lemmas

The main lemma we will define is ~Multiset_Retain_Rest_Equal~. It
will state that if ~B~ and ~C~ are two identical arrays, then if
~Multiset_Retain_Rest (A, B, Val))~ holds then
~Multiset_Retain_Rest (A, C, Val))~ holds. To show that property,
we will use another lemma: if two arrays are equal, then the
number of occurrences of a value is the same in both arrays. This
property will be represented by the ~Occ_Equal~ lemma.

**** The Occ_Equal lemma

The ~Occ_Equal~ property cannot be proved directly by SMT
solvers as it is a recursive one. This lemma, in the form of a
procedure, verifies that if two arrays are equal, then the
number of occurences of a given value are equal in both
arrays. Its specification is the following:

#+begin_src ada
  procedure Occ_Equal
    (A : T_Arr;
     B : T_Arr;
     E : T) with
     Pre  => A = B,
     Post => Occ (A, E) = Occ (B, E);
#+end_src

To prove the lemma, we give an implementation:

#+begin_src ada
  procedure Occ_Equal
    (A : T_Arr;
     B : T_Arr;
     E : T)
  is
  begin
     if A'Length = 0 then
        return;
     end if;

     if A (A'Last) = E then
        pragma Assert (B (B'Last) = E);
     else
        pragma Assert (B (B'Last) /= E);
     end if;

     Occ_Equal (Remove_Last (A), Remove_Last (B), E);
  end Occ_Equal;
#+end_src

The property is proved inductively:
- if both arrays are empty then there is nothing to prove
- if the arrays are of length greater than zero, then:
  - we verify that if the last value of ~A~ is equal to ~E~ then
    so is the last value of ~B~, and if the last value of ~A~ is
    different from ~E~ then the last value of ~B~ is also
    different from ~E~.
    Given the definition of [[file:../non-mutating/Count.org][Occ]], this will help prove that the
    contribution of the last index of ~A~ and ~B~ is the same in
    ~Occ (A,E)~ and ~Occ (B,E)~.
  - having taking care of the last element of both arrays, we
    will use the procedure to prove the property on the
    beginning of the array.

**** The Multiset_Retain_Rest_Equal lemma

The procedure will take as parameters an array ~A~ and two equal
arrays ~B~ and ~C~ and consider that ~Multiset_Retain_Rest
      (A,B,Val)~ is verified. The conclusion of the lemma should be
that ~Multiset_Retain_Rest (A,C,Val)~ also holds. The
specification of ~Mutliset_Retain_Rest_Equal~ is:

#+begin_src ada
  procedure Multiset_Retain_Rest_Equal
    (A   : T_Arr;
     B   : T_Arr;
     C   : T_Arr;
     Val : T) with
     Pre => A'Length > 0 and then B = C
     and then Multiset_Retain_Rest (A, B, Val),
     Post => Multiset_Retain_Rest (A, C, Val);
#+end_src

The implementation of the procedure, which is a proof of the
lemma, is:

#+begin_src ada
  procedure Multiset_Retain_Rest_Equal
    (A   : T_Arr;
     B   : T_Arr;
     C   : T_Arr;
     Val : T)
  is
  begin
     for E in T loop
        if E /= Val then
  	 Occ_Equal (B, C, E);
  	 pragma Assert (Occ (A, E) = Occ (C, E));
        end if;
        pragma Loop_Invariant
  	(for all F in T'First .. E =>
  	   (if F /= Val then Occ (A, F) = Occ (C, F)));
     end loop;
  end Multiset_Retain_Rest_Equal;
#+end_src

The proof is rather simple: we loop on ~T~ values. If the
current value ~E~ is different from ~Val~, then we prove that
the number of occurrences of ~E~ are the same in ~B~ and ~C~ and
use the loop invariant to remember the property for previous
values.

*** The final implementation of Remove_Copy

The final implementation for ~Remove_Copy~ is the following:

#+begin_src ada
  procedure Remove_Copy
    (A   :        T_Arr;
     B   : in out T_Arr;
     Val :        T;
     K   : in out Natural)
  is
     J      : Integer := A'First - 1;
     B_Save : T_Arr   := B with
        Ghost;

  begin
     if A'Length > 0 then
        K := B'First;

        for J in A'Range loop
  	 if A (J) /= Val then
  	    B_Save := B;
  	    B (K)  := A (J);
  	    if K > B'First then
  	       Multiset_Retain_Rest_Equal
  		 (A (A'First .. J - 1), B_Save (B'First .. K - 1),
  		  B (B'First .. K - 1), Val);
  	    end if;
  	    K := K + 1;
  	    Make_Prove_Multiset
  	      (A (A'First .. J), B (B'First .. K - 1), Val);
  	 end if;

  	 pragma Loop_Invariant
  	   (if K = B'First then (for all L in A'First .. J => A (L) = Val));
  	 pragma Loop_Invariant
  	   (K = B'First + Remove_Count (A (A'First .. J), Val));
  	 pragma Loop_Invariant
  	   (if K > B'First then
  	      Multiset_Retain_Rest
  		(A (A'First .. J), B (B'First .. K - 1), Val));
  	 pragma Loop_Invariant
  	   (for all L in B'First .. K - 1 => B (L) /= Val);
  	 pragma Loop_Invariant
  	   (for all L in K .. B'Last => B (L) = B'Loop_Entry (L));
        end loop;

        K := K - 1;
     end if;

  end Remove_Copy;
#+end_src

We use a ghost variable ~B_Save~ to store the value of ~B~ before
changing one of its element. We instantiate the
~Multiset_Retain_Rest_Equal~ procedure when ~K > B'First~ (which
means that one or more values have been changed in ~B~) to state
that ~B~ respect the ~Multiset_Retain_Rest~ property until index
~K - 1~.

Using ~GNATprove~ with this implementation, everything is finally
proved.
